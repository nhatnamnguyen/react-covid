{"version":3,"sources":["global/GlobalItem.tsx","global/Global.tsx","country/CountryItem.tsx","country/SearchBar.tsx","country/Country.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["GlobalItem","props","type","className","withStyle","count","Global","useState","cases","deaths","recovered","globalResult","setGlobalResult","useEffect","fetch","then","response","json","data","CountryItem","countryName","case","death","SearchBar","TextField","label","onChange","e","onSearchChange","Country","country","countryResults","setCountryResults","searchText","setSearchText","listItems","filter","countryResult","toLowerCase","includes","map","key","target","value","useStyles","makeStyles","theme","createStyles","root","display","drawer","breakpoints","up","width","flexShrink","appBar","marginLeft","menuButton","marginRight","spacing","toolbar","mixins","drawerPaper","content","flexGrow","padding","ResponsiveDrawer","container","classes","useTheme","React","mobileOpen","setMobileOpen","handleDrawerToggle","Divider","List","text","index","ListItem","button","component","Link","to","ListItemIcon","ListItemText","primary","CssBaseline","AppBar","position","Toolbar","IconButton","color","aria-label","edge","onClick","Typography","variant","noWrap","Hidden","smUp","implementation","Drawer","anchor","direction","open","onClose","paper","ModalProps","keepMounted","xsDown","exact","from","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1626a46a.chunk.js","sourcesContent":["import React from 'react'\r\n\r\ninterface Iprops {\r\n    type: string,\r\n    withStyle: string\r\n    count: number\r\n}\r\n\r\nfunction GlobalItem(props: Iprops) {\r\n    return (\r\n        <div>\r\n            <div>{props.type} : <span className={props.withStyle}>{props.count}</span></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GlobalItem","import React, { useEffect, useState } from 'react'\r\nimport GlobalItem from './GlobalItem'\r\n\r\nfunction Global() {\r\n\r\n    const [globalResult, setGlobalResult] = useState({cases: 0, deaths: 0, recovered: 0})\r\n\r\n    useEffect(() => {\r\n        fetch('https://coronavirus-19-api.herokuapp.com/all')\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n            setGlobalResult(data)\r\n        });\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <label>Global Corona-19</label>\r\n            <GlobalItem type='Cases' withStyle='case' count={globalResult.cases}/>\r\n            <GlobalItem type='Deaths' withStyle='death' count={globalResult.deaths}/>\r\n            <GlobalItem type='Recovered' withStyle='recovered' count={globalResult.recovered}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Global;","import React from 'react'\r\n\r\ninterface IProps {\r\n    countryName: string,\r\n    case: number,\r\n    death: number,\r\n    recovered: number\r\n}\r\n\r\nfunction CountryItem(props: IProps) {\r\n    return (\r\n        <div className='country-item'>\r\n            <div>{props.countryName}</div>\r\n            <div className='small'>Cases: <span className='case'>{props.case}</span></div>\r\n            <div className='small'>Deaths: <span className='death'>{props.death}</span></div>\r\n            <div className='small'>Recovered: <span className='recovered'>{props.recovered}</span></div>\r\n        </div>       \r\n    )\r\n}\r\n\r\nexport default CountryItem\r\n","import { TextField } from '@material-ui/core'\nimport React from 'react'\n\ninterface Props {\n    onSearchChange: any\n}\n\nfunction SearchBar(props : Props) {\n    return <TextField label=\"Filter by country name\" onChange={(e) => props.onSearchChange(e)}/>\n}\n\nexport default SearchBar","import React, { useState, useEffect } from 'react'\r\nimport CountryItem from './CountryItem'\r\nimport SearchBar from './SearchBar'\r\n\r\nfunction Country() {\r\n\r\n    const [countryResults, setCountryResults] = useState([{country: '', cases: 0, deaths: 0, recovered: 0 }])\r\n    const [searchText, setSearchText] = useState('')\r\n\r\n    useEffect(() => {\r\n        fetch('https://coronavirus-19-api.herokuapp.com/countries')\r\n            .then(response => {\r\n                return response.json()\r\n            }).then(data => {\r\n                setCountryResults(data)\r\n            })\r\n    }, [])\r\n\r\n    function onSearchChange(e: any) {\r\n        setSearchText(e.target.value)\r\n    }\r\n\r\n    const listItems = countryResults\r\n        .filter(countryResult => {\r\n            return countryResult.country !== 'Total:' \r\n                && countryResult.country !== ''\r\n                && countryResult.country !== 'World'\r\n                && countryResult.country.toLowerCase().includes(searchText.toLowerCase())\r\n        }).map((countryResult) =>\r\n            <CountryItem key={countryResult.country} countryName={countryResult.country} case={countryResult.cases} death={countryResult.deaths} recovered={countryResult.recovered} />\r\n        );\r\n    return (\r\n        <div>\r\n            <SearchBar onSearchChange={onSearchChange}></SearchBar>\r\n            {listItems}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Country\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Global from './global/Global';\r\nimport Country from './country/Country';\r\nimport { BrowserRouter as Router, Link, Route, Redirect } from 'react-router-dom'\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Hidden from '@material-ui/core/Hidden';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport InboxIcon from '@material-ui/icons/Public';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport MailIcon from '@material-ui/icons/Language';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles, useTheme, Theme, createStyles } from '@material-ui/core/styles';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      display: 'flex',\r\n    },\r\n    drawer: {\r\n      [theme.breakpoints.up('sm')]: {\r\n        width: drawerWidth,\r\n        flexShrink: 0,\r\n      },\r\n    },\r\n    appBar: {\r\n      [theme.breakpoints.up('sm')]: {\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        marginLeft: drawerWidth,\r\n      },\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n      [theme.breakpoints.up('sm')]: {\r\n        display: 'none',\r\n      },\r\n    },\r\n    // necessary for content to be below app bar\r\n    toolbar: theme.mixins.toolbar,\r\n    drawerPaper: {\r\n      width: drawerWidth,\r\n    },\r\n    content: {\r\n      flexGrow: 1,\r\n      padding: theme.spacing(3),\r\n    },\r\n  }),\r\n);\r\n\r\ninterface ResponsiveDrawerProps {\r\n  /**\r\n   * Injected by the documentation to work in an iframe.\r\n   * You won't need it on your project.\r\n   */\r\n  container?: any;\r\n}\r\n\r\nexport default function ResponsiveDrawer(props: ResponsiveDrawerProps) {\r\n  const { container } = props;\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [mobileOpen, setMobileOpen] = React.useState(false);\r\n\r\n  const handleDrawerToggle = () => {\r\n    setMobileOpen(!mobileOpen);\r\n  };\r\n\r\n  const drawer = (\r\n    <div>\r\n      <div className={classes.toolbar} />\r\n      <Divider />\r\n      <List>\r\n        {['Global', 'Countries'].map((text, index) => (\r\n          <ListItem button key={text} component={Link} to={text.toLowerCase()}>\r\n            <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\r\n            <ListItemText primary={text} />\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <Router>\r\n        <AppBar position=\"fixed\" className={classes.appBar}>\r\n          <Toolbar>\r\n            <IconButton\r\n              color=\"inherit\"\r\n              aria-label=\"open drawer\"\r\n              edge=\"start\"\r\n              onClick={handleDrawerToggle}\r\n              className={classes.menuButton}\r\n            >\r\n              <MenuIcon />\r\n            </IconButton>\r\n            <Typography variant=\"h6\" noWrap>\r\n              Covid-19 Information\r\n            </Typography>\r\n          </Toolbar>\r\n        </AppBar>\r\n        <nav className={classes.drawer} aria-label=\"mailbox folders\">\r\n          {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\r\n          <Hidden smUp implementation=\"css\">\r\n            <Drawer\r\n              container={container}\r\n              variant=\"temporary\"\r\n              anchor={theme.direction === 'rtl' ? 'right' : 'left'}\r\n              open={mobileOpen}\r\n              onClose={handleDrawerToggle}\r\n              classes={{\r\n                paper: classes.drawerPaper,\r\n              }}\r\n              ModalProps={{\r\n                keepMounted: true, // Better open performance on mobile.\r\n              }}\r\n            >\r\n              {drawer}\r\n            </Drawer>\r\n          </Hidden>\r\n          <Hidden xsDown implementation=\"css\">\r\n            <Drawer\r\n              classes={{\r\n                paper: classes.drawerPaper,\r\n              }}\r\n              variant=\"permanent\"\r\n              open\r\n            >\r\n              {drawer}\r\n            </Drawer>\r\n          </Hidden>\r\n        </nav>\r\n        <main className={classes.content}>\r\n          <div className={classes.toolbar} />\r\n          <div className='App'>\r\n            <Redirect exact from=\"/\" to=\"/global\"/>\r\n            <Route exact path=\"/global\" component={Global} />\r\n            <Route path=\"/countries\" component={Country} />\r\n          </div>\r\n        </main>\r\n      </Router>\r\n    </div>\r\n  );\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}